#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xyz.Xrm.Entities
{
	
	
	/// <summary>
	/// The type of the canvas app.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum CanvasApp_CanvasAppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("App Component Library", 1)]
		AppComponentLibrary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Classic Canvas App", 0)]
		ClassicCanvasApp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Custom Canvas Page", 2)]
		CustomCanvasPage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Unified App", 3)]
		UnifiedApp = 3,
	}
	
	/// <summary>
	/// An application built through a canvas-based editing experience.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("canvasapp")]
	public partial class CanvasApp : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the canvasapp entity
		/// </summary>
		public partial class Fields
		{
			public const string AAdCreatedById = "aadcreatedbyid";
			public const string AAdLastModifiedById = "aadlastmodifiedbyid";
			public const string AAdLastPublishedById = "aadlastpublishedbyid";
			public const string AdminControlBypassConsent = "admincontrolbypassconsent";
			public const string AdminControlBypassConsentName = "admincontrolbypassconsentname";
			public const string AppComponentDependencies = "appcomponentdependencies";
			public const string AppComponents = "appcomponents";
			public const string AppOpenUri = "appopenuri";
			public const string AppVersion = "appversion";
			public const string Assets = "assets";
			public const string Assets_Name = "assets_name";
			public const string AuthorizationReferences = "authorizationreferences";
			public const string BackgroundImage = "background_image";
			public const string BackgroundColor = "backgroundcolor";
			public const string BackgroundImage_Name = "backgroundimage_name";
			public const string BusinessUnit_CanvasApp = "businessunit_canvasapp";
			public const string BypassConsent = "bypassconsent";
			public const string BypassConsentName = "bypassconsentname";
			public const string CanConsumeAppPass = "canconsumeapppass";
			public const string CanvasAppId = "canvasappid";
			public const string CanvasAppRowId = "canvasapprowid";
			public const string CanvasAppType = "canvasapptype";
			public const string CDSDependencies = "cdsdependencies";
			public const string CommitMessage = "commitmessage";
			public const string ComponentState = "componentstate";
			public const string ConnectionReferences = "connectionreferences";
			public const string CreatedByClientVersion = "createdbyclientversion";
			public const string CreatedTime = "createdtime";
			public const string DatabaseReferences = "databasereferences";
			public const string Description = "description";
			public const string DisplayName = "displayname";
			public const string Document = "document";
			public const string Document_Name = "document_name";
			public const string EmbeddedApp = "embeddedapp";
			public const string GalleryItemId = "galleryitemid";
			public const string IntroducedVersion = "introducedversion";
			public const string IScDSUpgraded = "iscdsupgraded";
			public const string IScDSUpgradedName = "iscdsupgradedname";
			public const string IsCustomizable = "iscustomizable";
			public const string IsFeaturedApp = "isfeaturedapp";
			public const string IsFeaturedAppName = "isfeaturedappname";
			public const string IsHeroApp = "isheroapp";
			public const string IsHeroAppName = "isheroappname";
			public const string IsHidden = "ishidden";
			public const string IsHiddenName = "ishiddenname";
			public const string IsManaged = "ismanaged";
			public const string IsManagedName = "ismanagedname";
			public const string LargeIcon = "large_icon";
			public const string LargeIcon_Name = "largeicon_name";
			public const string LastModifiedTime = "lastmodifiedtime";
			public const string LastPublishTime = "lastpublishtime";
			public const string MediumIcon = "medium_icon";
			public const string MediumIcon_Name = "mediumicon_name";
			public const string MinClientVersion = "minclientversion";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwnerIdName = "owneridname";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningBusinessUnitName = "owningbusinessunitname";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Publisher = "publisher";
			public const string SmallIcon = "small_icon";
			public const string SmallIcon_Name = "smallicon_name";
			public const string SolutionId = "solutionid";
			public const string Status = "status";
			public const string Tags = "tags";
			public const string TeamsIcon = "teams_icon";
			public const string TeamsIcon_Name = "teamsicon_name";
			public const string UniqueCanvasAppId = "uniquecanvasappid";
			public const string VersionNumber = "versionnumber";
			public const string WideIcon = "wide_icon";
			public const string WideIcon_Name = "wideicon_name";
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public CanvasApp(System.Guid id) : 
				base(EntityLogicalName, id)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public CanvasApp(string keyName, object keyValue) : 
				base(EntityLogicalName, keyName, keyValue)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public CanvasApp(Microsoft.Xrm.Sdk.KeyAttributeCollection keyAttributes) : 
				base(EntityLogicalName, keyAttributes)
		{
		}
		
		public const string AlternateKeys = "componentstate,name,overwritetime";
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public CanvasApp() : 
				base(EntityLogicalName)
		{
		}
		
		public const string PrimaryIdAttribute = "canvasappid";
		
		public const string PrimaryNameAttribute = "name";
		
		public const string EntitySchemaName = "CanvasApp";
		
		public const string EntityLogicalName = "canvasapp";
		
		public const string EntityLogicalCollectionName = "canvasapps";
		
		public const string EntitySetName = "canvasapps";
		
		/// <summary>
		/// Unique identifier of the user who created the canvas app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aadcreatedbyid")]
		public string AAdCreatedById
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aadcreatedbyid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("aadcreatedbyid", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aadlastmodifiedbyid")]
		public string AAdLastModifiedById
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aadlastmodifiedbyid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("aadlastmodifiedbyid", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last published the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("aadlastpublishedbyid")]
		public string AAdLastPublishedById
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("aadlastpublishedbyid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("aadlastpublishedbyid", value);
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app was marked for bypass consent by an admin.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("admincontrolbypassconsent")]
		public System.Nullable<bool> AdminControlBypassConsent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("admincontrolbypassconsent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("admincontrolbypassconsent", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("admincontrolbypassconsentname")]
		public string AdminControlBypassConsentName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("admincontrolbypassconsent"))
				{
					return this.FormattedValues["admincontrolbypassconsent"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The app component dependencies.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("appcomponentdependencies")]
		public string AppComponentDependencies
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("appcomponentdependencies");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("appcomponentdependencies", value);
			}
		}
		
		/// <summary>
		/// The app components.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("appcomponents")]
		public string AppComponents
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("appcomponents");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("appcomponents", value);
			}
		}
		
		/// <summary>
		/// The app open URI.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("appopenuri")]
		public string AppOpenUri
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("appopenuri");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("appopenuri", value);
			}
		}
		
		/// <summary>
		/// The application version.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("appversion")]
		public string AppVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("appversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("appversion", value);
			}
		}
		
		/// <summary>
		/// Assets for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("assets")]
		public object Assets
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("assets");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("assets_name")]
		public string Assets_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("assets"))
				{
					return this.FormattedValues["assets"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The authorization references of the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("authorizationreferences")]
		public string AuthorizationReferences
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("authorizationreferences");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("authorizationreferences", value);
			}
		}
		
		/// <summary>
		/// Background image for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("background_image")]
		public object BackgroundImage
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("background_image");
			}
		}
		
		/// <summary>
		/// The background image color.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("backgroundcolor")]
		public string BackgroundColor
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("backgroundcolor");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("backgroundcolor", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("backgroundimage_name")]
		public string BackgroundImage_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("background_image"))
				{
					return this.FormattedValues["background_image"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app should bypass consent from consumers.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bypassconsent")]
		public System.Nullable<bool> BypassConsent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("bypassconsent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("bypassconsent", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("bypassconsentname")]
		public string BypassConsentName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("bypassconsent"))
				{
					return this.FormattedValues["bypassconsent"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The type of the canvas app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canconsumeapppass")]
		public System.Nullable<bool> CanConsumeAppPass
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("canconsumeapppass");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("canconsumeapppass", value);
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canvasappid")]
		public System.Nullable<System.Guid> CanvasAppId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("canvasappid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("canvasappid", value);
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canvasapprowid")]
		public System.Nullable<System.Guid> CanvasAppRowId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("canvasapprowid");
			}
		}
		
		/// <summary>
		/// The type of the canvas app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canvasapptype")]
		public virtual CanvasApp_CanvasAppType? CanvasAppType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((CanvasApp_CanvasAppType?)(EntityOptionSetEnum.GetEnum(this, "canvasapptype")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("canvasapptype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		/// <summary>
		/// Internal use. The app dependency details.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("cdsdependencies")]
		public string CDSDependencies
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("cdsdependencies");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("cdsdependencies", value);
			}
		}
		
		/// <summary>
		/// The commit message of the app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("commitmessage")]
		public string CommitMessage
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("commitmessage");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("commitmessage", value);
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public virtual ComponentState? ComponentState
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ComponentState?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
			}
		}
		
		/// <summary>
		/// The connection references of the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("connectionreferences")]
		public string ConnectionReferences
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("connectionreferences");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("connectionreferences", value);
			}
		}
		
		/// <summary>
		/// The version of the client that was used to author the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyclientversion")]
		public string CreatedByClientVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("createdbyclientversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("createdbyclientversion", value);
			}
		}
		
		/// <summary>
		/// Date and time when the application was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdtime")]
		public System.Nullable<System.DateTime> CreatedTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdtime");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("createdtime", value);
			}
		}
		
		/// <summary>
		/// The database references of the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("databasereferences")]
		public string DatabaseReferences
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("databasereferences");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("databasereferences", value);
			}
		}
		
		/// <summary>
		/// The description of the app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
		public string Description
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("description", value);
			}
		}
		
		/// <summary>
		/// The display name of the app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("displayname")]
		public string DisplayName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("displayname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("displayname", value);
			}
		}
		
		/// <summary>
		/// Document for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("document")]
		public object Document
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("document");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("document_name")]
		public string Document_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("document"))
				{
					return this.FormattedValues["document"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Internal use. The embedded app information.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("embeddedapp")]
		public string EmbeddedApp
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("embeddedapp");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("embeddedapp", value);
			}
		}
		
		/// <summary>
		/// The gallery item identifier.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("galleryitemid")]
		public string GalleryItemId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("galleryitemid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("galleryitemid", value);
			}
		}
		
		/// <summary>
		/// Version in which the canvas app is introduced.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("introducedversion", value);
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app contains CDS 1.0 references.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscdsupgraded")]
		public System.Nullable<bool> IScDSUpgraded
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("iscdsupgraded");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("iscdsupgraded", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscdsupgradedname")]
		public string IScDSUpgradedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("iscdsupgraded"))
				{
					return this.FormattedValues["iscdsupgraded"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component can be customized.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
		public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("iscustomizable", value);
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app is a featured app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isfeaturedapp")]
		public System.Nullable<bool> IsFeaturedApp
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isfeaturedapp");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("isfeaturedapp", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isfeaturedappname")]
		public string IsFeaturedAppName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("isfeaturedapp"))
				{
					return this.FormattedValues["isfeaturedapp"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app is a hero app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isheroapp")]
		public System.Nullable<bool> IsHeroApp
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isheroapp");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("isheroapp", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isheroappname")]
		public string IsHeroAppName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("isheroapp"))
				{
					return this.FormattedValues["isheroapp"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Indicates whether the canvas app is hidden from a user's list.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ishidden")]
		public System.Nullable<bool> IsHidden
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ishidden");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ishidden", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ishiddenname")]
		public string IsHiddenName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ishidden"))
				{
					return this.FormattedValues["ishidden"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Indicates whether the solution component is part of a managed solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
		public System.Nullable<bool> IsManaged
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanagedname")]
		public string IsManagedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ismanaged"))
				{
					return this.FormattedValues["ismanaged"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Large icon for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("large_icon")]
		public object LargeIcon
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("large_icon");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("largeicon_name")]
		public string LargeIcon_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("large_icon"))
				{
					return this.FormattedValues["large_icon"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the application was last modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastmodifiedtime")]
		public System.Nullable<System.DateTime> LastModifiedTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("lastmodifiedtime");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("lastmodifiedtime", value);
			}
		}
		
		/// <summary>
		/// Date and time when the application was last published.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastpublishtime")]
		public System.Nullable<System.DateTime> LastPublishTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("lastpublishtime");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("lastpublishtime", value);
			}
		}
		
		/// <summary>
		/// Medium icon for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("medium_icon")]
		public object MediumIcon
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("medium_icon");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("mediumicon_name")]
		public string MediumIcon_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("medium_icon"))
				{
					return this.FormattedValues["medium_icon"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The version of the client that was used to author the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("minclientversion")]
		public string MinClientVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("minclientversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("minclientversion", value);
			}
		}
		
		/// <summary>
		/// Name of the CanvasApp
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("name", value);
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
		public System.Nullable<System.DateTime> OverwriteTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user or team who owns the canvas app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ownerid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridname")]
		public string OwnerIdName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the business unit that owns the process.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunitname")]
		public string OwningBusinessUnitName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("owningbusinessunit"))
				{
					return this.FormattedValues["owningbusinessunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the team who owns the process.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who owns the process.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// The publisher of the app.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("publisher")]
		public string Publisher
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("publisher");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("publisher", value);
			}
		}
		
		/// <summary>
		/// Small icon for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("small_icon")]
		public object SmallIcon
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("small_icon");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("smallicon_name")]
		public string SmallIcon_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("small_icon"))
				{
					return this.FormattedValues["small_icon"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
		public System.Nullable<System.Guid> SolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// A value indicating whether the application is ready for consumption.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("status")]
		public string Status
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("status");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("status", value);
			}
		}
		
		/// <summary>
		/// The metadata tags of the application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("tags")]
		public string Tags
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("tags");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("tags", value);
			}
		}
		
		/// <summary>
		/// Teams icon for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("teams_icon")]
		public object TeamsIcon
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("teams_icon");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("teamsicon_name")]
		public string TeamsIcon_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("teams_icon"))
				{
					return this.FormattedValues["teams_icon"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The globally unique canvas app id
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("uniquecanvasappid")]
		public string UniqueCanvasAppId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("uniquecanvasappid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("uniquecanvasappid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// Wide icon for Canvas Apps.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("wide_icon")]
		public object WideIcon
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<object>("wide_icon");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("wideicon_name")]
		public string WideIcon_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("wide_icon"))
				{
					return this.FormattedValues["wide_icon"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// N:1 businessunit_canvasapp
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("businessunit_canvasapp")]
		public Xyz.Xrm.Entities.BusinessUnit BusinessUnit_CanvasApp
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<Xyz.Xrm.Entities.BusinessUnit>("businessunit_canvasapp", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public CanvasApp(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["canvasappid"] = base.Id;
                        break;
                    case "canvasappid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}
#pragma warning restore CS1591
